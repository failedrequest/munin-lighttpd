#!/usr/bin/python
"""
Munin plugin to monitor lighttpd statistics
Ryan Tucker <rtucker@gmail.com>, 2009/07/12

To use:
ln -s path_to_this_script /etc/munin/plugins/lighttpd_accesses
ln -s path_to_this_script /etc/munin/plugins/lighttpd_busyservers
ln -s path_to_this_script /etc/munin/plugins/lighttpd_idleservers
ln -s path_to_this_script /etc/munin/plugins/lighttpd_kbytes
ln -s path_to_this_script /etc/munin/plugins/lighttpd_uptime

Also ensure that lighttpd has mod_status enabled and that your
status.status-url is set appropriately.  Adjust the url below if
needed.
"""

import os
import sys
import urllib2

STATUS_URL = 'http://127.0.0.1/server-status?auto'

def print_config(name):
    """Generates and returns a munin config for a given chart."""
    counters = ['accesses', 'kbytes']
    
    typedict = {'accesses': 'accesses per second',
                'kbytes': 'bits per second',
                'uptime': 'seconds',
                'busyservers': 'number of servers',
                'idleservers': 'number of servers'}

    if name in counters:
        addl = 'data.type DERIVE\ndata.min 0\n'
    else:
        addl = ''

    if name == 'kbytes':
        addl += 'data.cdef data,8000,*\n'

    return """graph_title lighttpd: %s
graph_vlabel %s
graph_category lighttpd
graph_info %s (%s)
data.label %s
data.info %s
%s""" % (name, typedict[name], name, typedict[name], name, name, addl)

def print_status(name, url):
    """Gets lighttpd's status and returns the requested value."""
    statuslist = urllib2.urlopen(url).readlines()
    mappings = {'Total Accesses': 'accesses',
                'Total kBytes': 'kbytes',
                'Uptime': 'uptime',
                'BusyServers': 'busyservers',
                'IdleServers': 'idleservers'}

    for i in statuslist:
        key, value = i.split(':')
        if key in mappings.keys():
            if mappings[key] == name:
                return 'data.value %s' % value

def main(myname, url):
    """Routes the request to the right place."""
    if myname in ['accesses', 'kbytes', 'uptime', 'busyservers', 'idleservers']:
        if len(sys.argv) > 1 and sys.argv[1] == 'config':
            sys.stdout.write(print_config(myname))
        else:
            sys.stdout.write(print_status(myname, url))
    else:
        print 'unknown parameter %s' % myname
        sys.exit(1)

if __name__ == '__main__':
    try:
        __myname__ = os.path.split(sys.argv[0])[-1].split('_')[1]
    except IndexError:
        # something's broke, we'll assume accesses
        __myname__ = 'accesses'

    main(__myname__, STATUS_URL)

